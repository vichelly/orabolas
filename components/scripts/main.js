// constantes do robo
const raioDeInterceptacao = 0.1, veloMaxima = 2.8, aceleracao = 2.8, aceleracaoXBola = -0.01, aceleracaoYBola = -0.016, centroGolY=3,centroGolX=9;
var vetorTempo = [0,0.02,0.04,0.06,0.08,0.1,0.12,0.14,0.16,0.18,0.2,0.22,0.24,0.26,0.28,0.3,0.32,0.34,0.36,0.38,0.4,0.42,0.44,0.46,0.48,0.5,0.52,0.54,0.56,0.58,0.6,0.62,0.64,0.66,0.68,0.7,0.72,0.74,0.76,0.78,0.8,0.82,0.84,0.86,0.88,0.9,0.92,0.94,0.96,0.98,1,1.02,1.04,1.06,1.08,1.1,1.12,1.14,1.16,1.18,1.2,1.22,1.24,1.26,1.28,1.3,1.32,1.34,1.36,1.38,1.4,1.42,1.44,1.46,1.48,1.5,1.52,1.54,1.56,1.58,1.6,1.62,1.64,1.66,1.68,1.7,1.72,1.74,1.76,1.78,1.8,1.82,1.84,1.86,1.88,1.9,1.92,1.94,1.96,1.98,2,2.02,2.04,2.06,2.08,2.1,2.12,2.14,2.16,2.18,2.2,2.22,2.24,2.26,2.28,2.3,2.32,2.34,2.36,2.38,2.4,2.42,2.44,2.46,2.48,2.5,2.52,2.54,2.56,2.58,2.6,2.62,2.64,2.66,2.68,2.7,2.72,2.74,2.76,2.78,2.8,2.82,2.84,2.86,2.88,2.9,2.92,2.94,2.96,2.98,3,3.02,3.04,3.06,3.08,3.1,3.12,3.14,3.16,3.18,3.2,3.22,3.24,3.26,3.28,3.3,3.32,3.34,3.36,3.38,3.4,3.42,3.44,3.46,3.48,3.5,3.52,3.54,3.56,3.58,3.6,3.62,3.64,3.66,3.68,3.7,3.72,3.74,3.76,3.78,3.8,3.82,3.84,3.86,3.88,3.9,3.92,3.94,3.96,3.98,4,4.02,4.04,4.06,4.08,4.1,4.12,4.14,4.16,4.18,4.2,4.22,4.24,4.26,4.28,4.3,4.32,4.34,4.36,4.38,4.4,4.42,4.44,4.46,4.48,4.5,4.52,4.54,4.56,4.58,4.6,4.62,4.64,4.66,4.68,4.7,4.72,4.74,4.76,4.78,4.8,4.82,4.84,4.86,4.88,4.9,4.92,4.94,4.96,4.98,5,5.02,5.04,5.06,5.08,5.1,5.12,5.14,5.16,5.18,5.2,5.22,5.24,5.26,5.28,5.3,5.32,5.34,5.36,5.38,5.4,5.42,5.44,5.46,5.48,5.5,5.52,5.54,5.56,5.58,5.6,5.62,5.64,5.66,5.68,5.7,5.72,5.74,5.76,5.78,5.8,5.82,5.84,5.86,5.88,5.9,5.92,5.94,5.96,5.98,6,6.02,6.04,6.06,6.08,6.1,6.12,6.14,6.16,6.18,6.2,6.22,6.24,6.26,6.28,6.3,6.32,6.34,6.36,6.38,6.4,6.42,6.44,6.46,6.48,6.5,6.52,6.54,6.56,6.58,6.6,6.62,6.64,6.66,6.68,6.7,6.72,6.74,6.76,6.78,6.8,6.82,6.84,6.86,6.88,6.9,6.92,6.94,6.96,6.98,7,7.02,7.04,7.06,7.08,7.1,7.12,7.14,7.16,7.18,7.2,7.22,7.24,7.26,7.28,7.3,7.32,7.34,7.36,7.38,7.4,7.42,7.44,7.46,7.48,7.5,7.52,7.54,7.56,7.58,7.6,7.62,7.64,7.66,7.68,7.7,7.72,7.74,7.76,7.78,7.8,7.82,7.84,7.86,7.88,7.9,7.92,7.94,7.96,7.98,8,8.02,8.04,8.06,8.08,8.1,8.12,8.14,8.16,8.18,8.2,8.22,8.24,8.26,8.28,8.3,8.32,8.34,8.36,8.38,8.4,8.42,8.44,8.46,8.48,8.5,8.52,8.54,8.56,8.58,8.6,8.62,8.64,8.66,8.68,8.7,8.72,8.74,8.76,8.78,8.8,8.82,8.84,8.86,8.88,8.9,8.92,8.94,8.96,8.98,9,9.02,9.04,9.06,9.08,9.1,9.12,9.14,9.16,9.18,9.2,9.22,9.24,9.26,9.28,9.3,9.32,9.34,9.36,9.38,9.4,9.42,9.44,9.46,9.48,9.5,9.52,9.54,9.56,9.58,9.6,9.62,9.64,9.66,9.68,9.7,9.72,9.74,9.76,9.78,9.8,9.82,9.84,9.86,9.88,9.9,9.92,9.94,9.96,9.98,10,10.02,10.04,10.06,10.08,10.1,10.12,10.14,10.16,10.18,10.2,10.22,10.24,10.26,10.28,10.3,10.32,10.34,10.36,10.38,10.4,10.42,10.44,10.46,10.48,10.5,10.52,10.54,10.56,10.58,10.6,10.62,10.64,10.66,10.68,10.7,10.72,10.74,10.76,10.78,10.8,10.82,10.84,10.86,10.88,10.9,10.92,10.94,10.96,10.98,11,11.02,11.04,11.06,11.08,11.1,11.12,11.14,11.16,11.18,11.2,11.22,11.24,11.26,11.28,11.3,11.32,11.34,11.36,11.38,11.4,11.42,11.44,11.46,11.48,11.5,11.52,11.54,11.56,11.58,11.6,11.62,11.64,11.66,11.68,11.7,11.72,11.74,11.76,11.78,11.8,11.82,11.84,11.86,11.88,11.9,11.92,11.94,11.96,11.98,12,12.02,12.04,12.06,12.08,12.1,12.12,12.14,12.16,12.18,12.2,12.22,12.24,12.26,12.28,12.3,12.32,12.34,12.36,12.38,12.4,12.42,12.44,12.46,12.48,12.5,12.52,12.54,12.56,12.58,12.6,12.62,12.64,12.66,12.68,12.7,12.72,12.74,12.76,12.78,12.8,12.82,12.84,12.86,12.88,12.9,12.92,12.94,12.96,12.98,13,13.02,13.04,13.06,13.08,13.1,13.12,13.14,13.16,13.18,13.2,13.22,13.24,13.26,13.28,13.3,13.32,13.34,13.36,13.38,13.4,13.42,13.44,13.46,13.48,13.5,13.52,13.54,13.56,13.58,13.6,13.62,13.64,13.66,13.68,13.7,13.72,13.74,13.76,13.78,13.8,13.82,13.84,13.86,13.88,13.9,13.92,13.94,13.96,13.98,14,14.02,14.04,14.06,14.08,14.1,14.12,14.14,14.16,14.18,14.2,14.22,14.24,14.26,14.28,14.3,14.32,14.34,14.36,14.38,14.4,14.42,14.44,14.46,14.48,14.5,14.52,14.54,14.56,14.58,14.6,14.62,14.64,14.66,14.68,14.7,14.72,14.74,14.76,14.78,14.8,14.82,14.84,14.86,14.88,14.9,14.92,14.94,14.96,14.98,15,15.02,15.04,15.06,15.08,15.1,15.12,15.14,15.16,15.18,15.2,15.22,15.24,15.26,15.28,15.3,15.32,15.34,15.36,15.38,15.4,15.42,15.44,15.46,15.48,15.5,15.52,15.54,15.56,15.58,15.6,15.62,15.64,15.66,15.68,15.7,15.72,15.74,15.76,15.78,15.8,15.82,15.84,15.86,15.88,15.9,15.92,15.94,15.96,15.98,16,16.02,16.04,16.06,16.08,16.1,16.12,16.14,16.16,16.18,16.2,16.22,16.24,16.26,16.28,16.3,16.32,16.34,16.36,16.38,16.4,16.42,16.44,16.46,16.48,16.5,16.52,16.54,16.56,16.58,16.6,16.62,16.64,16.66,16.68,16.7,16.72,16.74,16.76,16.78,16.8,16.82,16.84,16.86,16.88,16.9,16.92,16.94,16.96,16.98,17,17.02,17.04,17.06,17.08,17.1,17.12,17.14,17.16,17.18,17.2,17.22,17.24,17.26,17.28,17.3,17.32,17.34,17.36,17.38,17.4,17.42,17.44,17.46,17.48,17.5,17.52,17.54,17.56,17.58,17.6,17.62,17.64,17.66,17.68,17.7,17.72,17.74,17.76,17.78,17.8,17.82,17.84,17.86,17.88,17.9,17.92,17.94,17.96,17.98,18,18.02,18.04,18.06,18.08,18.1,18.12,18.14,18.16,18.18,18.2,18.22,18.24,18.26,18.28,18.3,18.32,18.34,18.36,18.38,18.4,18.42,18.44,18.46,18.48,18.5,18.52,18.54,18.56,18.58,18.6,18.62,18.64,18.66,18.68,18.7,18.72,18.74,18.76,18.78,18.8,18.82,18.84,18.86,18.88,18.9,18.92,18.94,18.96,18.98,19,19.02,19.04,19.06,19.08,19.1,19.12,19.14,19.16,19.18,19.2,19.22,19.24,19.26,19.28,19.3,19.32,19.34,19.36,19.38,19.4,19.42,19.44,19.46,19.48,19.5,19.52,19.54,19.56,19.58,19.6,19.62,19.64,19.66,19.68,19.7,19.72,19.74,19.76,19.78,19.8,19.82,19.84,19.86,19.88,19.9,19.92,19.94,19.96,19.98,20.00],
vetorBolaX = ['1', '1.05', '1.1', '1.149', '1.199', '1.248', '1.298', '1.347', '1.396', '1.444', '1.493', '1.542', '1.59', '1.638', '1.687', '1.735', '1.782', '1.83', '1.878', '1.925', '1.972', '2.019', '2.066', '2.113', '2.16', '2.207', '2.253', '2.299', '2.345', '2.391', '2.437', '2.483', '2.529', '2.574', '2.619', '2.664', '2.709', '2.754', '2.799', '2.843', '2.888', '2.932', '2.976', '3.02', '3.064', '3.107', '3.151', '3.194', '3.237', '3.28', '3.323', '3.366', '3.408', '3.451', '3.493', '3.535', '3.577', '3.619', '3.66', '3.702', '3.743', '3.784', '3.825', '3.866', '3.907', '3.947', '3.988', '4.028', '4.068', '4.108', '4.148', '4.187', '4.227', '4.266', '4.305', '4.344', '4.383', '4.421', '4.46', '4.498', '4.536', '4.574', '4.612', '4.65', '4.687', '4.724', '4.761', '4.798', '4.835', '4.872', '4.908', '4.945', '4.981', '5.017', '5.053', '5.088', '5.124', '5.159', '5.194', '5.229', '5.264', '5.299', '5.333', '5.367', '5.402', '5.435', '5.469', '5.503', '5.536', '5.57', '5.603', '5.636', '5.668', '5.701', '5.733', '5.766', '5.798', '5.829', '5.861', '5.893', '5.924', '5.955', '5.986', '6.017', '6.048', '6.078', '6.108', '6.139', '6.168', '6.198', '6.228', '6.257', '6.286', '6.315', '6.344', '6.373', '6.401', '6.43', '6.458', '6.486', '6.514', '6.541', '6.569', '6.596', '6.623', '6.65', '6.676', '6.703', '6.729', '6.755', '6.781', '6.807', '6.832', '6.858', '6.883', '6.908', '6.933', '6.957', '6.982', '7.006', '7.03', '7.054', '7.077', '7.101', '7.124', '7.147', '7.17', '7.193', '7.215', '7.238', '7.26', '7.282', '7.303', '7.325', '7.346', '7.367', '7.388', '7.409', '7.43', '7.45', '7.47', '7.49', '7.51', '7.53', '7.549', '7.568', '7.587', '7.606', '7.625', '7.643', '7.661', '7.679', '7.697', '7.714', '7.732', '7.749', '7.766', '7.783', '7.799', '7.816', '7.832', '7.848', '7.864', '7.879', '7.895', '7.91', '7.925', '7.94', '7.954', '7.968', '7.983', '7.997', '8.01', '8.024', '8.037', '8.05', '8.063', '8.076', '8.088', '8.1', '8.113', '8.124', '8.136', '8.147', '8.159', '8.17', '8.18', '8.191', '8.201', '8.212', '8.221', '8.231', '8.241', '8.25', '8.259', '8.268', '8.277', '8.285', '8.293', '8.301', '8.309', '8.317', '8.324', '8.331', '8.338', '8.345', '8.351', '8.358', '8.364', '8.369', '8.375', '8.38', '8.386', '8.391', '8.395', '8.4', '8.404', '8.408', '8.412', '8.416', '8.419', '8.422', '8.425', '8.428', '8.43', '8.433', '8.435', '8.436', '8.438', '8.439', '8.441', '8.441', '8.442', '8.443', '8.443', '8.443', '8.443', '8.442', '8.442', '8.441', '8.439', '8.438', '8.437', '8.435', '8.433', '8.43', '8.428', '8.425', '8.422', '8.419', '8.415', '8.412', '8.408', '8.404', '8.399', '8.395', '8.39', '8.385', '8.379', '8.374', '8.368', '8.362', '8.356', '8.349', '8.342', '8.335', '8.328', '8.321', '8.313', '8.305', '8.297', '8.288', '8.28', '8.271', '8.262', '8.252', '8.243', '8.233', '8.223', '8.212', '8.202', '8.191', '8.18', '8.169', '8.157', '8.145', '8.133', '8.121', '8.108', '8.095', '8.082', '8.069', '8.055', '8.042', '8.028', '8.013', '7.999', '7.984', '7.969', '7.954', '7.938', '7.922', '7.906', '7.89', '7.874', '7.857', '7.84', '7.822', '7.805', '7.787', '7.769', '7.751', '7.732', '7.713', '7.694', '7.675', '7.655', '7.636', '7.615', '7.595', '7.574', '7.554', '7.532', '7.511', '7.489', '7.468', '7.445', '7.423', '7.4', '7.377', '7.354', '7.331', '7.307', '7.283', '7.259', '7.234', '7.21', '7.185', '7.159', '7.134', '7.108', '7.082', '7.056', '7.029', '7.002', '6.975', '6.948', '6.92', '6.892', '6.864', '6.835', '6.807', '6.778', '6.748', '6.719', '6.689', '6.659', '6.629', '6.598', '6.567', '6.536', '6.505', '6.473', '6.441', '6.409', '6.376', '6.343', '6.31', '6.277', '6.243', '6.21', '6.175', '6.141', '6.106', '6.071', '6.036', '6.001', '5.965', '5.929', '5.892', '5.856', '5.819', '5.782', '5.744', '5.707', '5.669', '5.63', '5.592', '5.553', '5.514', '5.474', '5.435', '5.395', '5.355', '5.314', '5.273', '5.232', '5.191', '5.149', '5.107', '5.065', '5.022', '4.98', '4.937', '4.893', '4.85', '4.806', '4.761', '4.717', '4.672', '4.627', '4.582', '4.536', '4.49', '4.444', '4.397', '4.35', '4.303', '4.256', '4.208', '4.16', '4.112', '4.064', '4.015', '3.966', '3.916', '3.866', '3.816', '3.766'], 
vetorBolaY = ['0.7', '0.736', '0.772', '0.807', '0.843', '0.878', '0.913', '0.948', '0.983', '1.018', '1.052', '1.086', '1.12', '1.154', '1.188', '1.222', '1.256', '1.289', '1.322', '1.355', '1.388', '1.421', '1.453', '1.486', '1.518', '1.55', '1.582', '1.614', '1.645', '1.677', '1.708', '1.739', '1.77', '1.801', '1.832', '1.862', '1.892', '1.922', '1.952', '1.982', '2.012', '2.042', '2.071', '2.1', '2.129', '2.158', '2.187', '2.215', '2.244', '2.272', '2.3', '2.328', '2.356', '2.383', '2.411', '2.438', '2.465', '2.492', '2.519', '2.546', '2.572', '2.598', '2.624', '2.65', '2.676', '2.702', '2.728', '2.753', '2.778', '2.803', '2.828', '2.853', '2.877', '2.902', '2.926', '2.95', '2.974', '2.998', '3.021', '3.045', '3.068', '3.091', '3.114', '3.137', '3.16', '3.182', '3.204', '3.226', '3.248','3.27', '3.292', '3.314', '3.335', '3.356', '3.377', '3.398', '3.419', '3.439', '3.46', '3.48', '3.5', '3.52', '3.54', '3.559', '3.579', '3.598', '3.617', '3.636', '3.655', '3.674', '3.692', '3.71', '3.728', '3.746', '3.764', '3.782', '3.8', '3.817', '3.834', '3.851', '3.868', '3.885', '3.901', '3.918', '3.934', '3.95', '3.966', '3.982', '3.997', '4.013', '4.028', '4.043', '4.058', '4.073', '4.088', '4.102', '4.116', '4.13', '4.144', '4.158', '4.172', '4.186', '4.199', '4.212', '4.225', '4.238', '4.251', '4.263', '4.276', '4.288', '4.3', '4.312', '4.324', '4.335', '4.347', '4.358', '4.369', '4.38', '4.391', '4.402', '4.412', '4.422', '4.432', '4.442', '4.452', '4.462', '4.472', '4.481', '4.49', '4.499', '4.508', '4.517', '4.525', '4.534', '4.542', '4.55', '4.558', '4.566', '4.573', '4.581', '4.588', '4.595', '4.602', '4.609', '4.616', '4.622', '4.628', '4.634', '4.64', '4.646', '4.652', '4.658', '4.663', '4.668', '4.673', '4.678', '4.683', '4.687', '4.692', '4.696', '4.7', '4.704', '4.708', '4.711', '4.715', '4.718', '4.721', '4.724', '4.727', '4.73', '4.732', '4.734', '4.736', '4.738', '4.74', '4.742', '4.744', '4.745', '4.746', '4.747', '4.748', '4.749', '4.749', '4.75', '4.75', '4.75', '4.75', '4.75', '4.749', '4.749', '4.748', '4.747', '4.746', '4.745', '4.744', '4.742', '4.74', '4.738', '4.736', '4.734', '4.732', '4.73', '4.727', '4.724', '4.721', '4.718', '4.715', '4.711', '4.708', '4.704', '4.7', '4.696', '4.692', '4.687', '4.683', '4.678', '4.673', '4.668', '4.663', '4.658', '4.652', '4.646', '4.64', '4.634', '4.628', '4.622', '4.616', '4.609', '4.602', '4.595', '4.588', '4.581', '4.573', '4.566', '4.558', '4.55', '4.542', '4.534', '4.525', '4.517', '4.508', '4.499', '4.49', '4.481', '4.472', '4.462', '4.452', '4.442', '4.432', '4.422', '4.412', '4.402', '4.391', '4.38', '4.369', '4.358', '4.347', '4.335', '4.324', '4.312', '4.3', '4.288', '4.276', '4.263', '4.251', '4.238', '4.225', '4.212', '4.199', '4.186', '4.172', '4.158', '4.144', '4.13', '4.116', '4.102', '4.088', '4.073', '4.058', '4.043', '4.028', '4.013', '3.997', '3.982', '3.966', '3.95', '3.934', '3.918', '3.901', '3.885', '3.868', '3.851', '3.834', '3.817', '3.8', '3.782', '3.764', '3.746', '3.728', '3.71', '3.692', '3.674', '3.655', '3.636', '3.617', '3.598', '3.579', '3.559', '3.54', '3.52', '3.5', '3.48', '3.46', '3.439', '3.419', '3.398', '3.377', '3.356', '3.335', '3.314', '3.292', '3.27', '3.248', '3.226', '3.204', '3.182', '3.16', '3.137', '3.114', '3.091', '3.068', '3.045', '3.021', '2.998', '2.974', '2.95', '2.926', '2.902', '2.877', '2.853', '2.828', '2.803', '2.778', '2.753', '2.728', '2.702', '2.676', '2.65', '2.624', '2.598', '2.572', '2.546', '2.519', '2.492', '2.465', '2.438', '2.411', '2.383', '2.356', '2.328', '2.3', '2.272', '2.244', '2.215', '2.187', '2.158', '2.129', '2.1', '2.071', '2.042', '2.012', '1.982', '1.952', '1.922', '1.892', '1.862', '1.832', '1.801', '1.77', '1.739', '1.708', '1.677', '1.645', '1.614', '1.582', '1.55', '1.518', '1.486', '1.453','1.421', '1.388', '1.355', '1.322', '1.289', '1.256', '1.222', '1.188', '1.154', '1.12', '1.086', '1.052', '1.018', '0.983', '0.948', '0.913', '0.878', '0.843', '0.807', '0.772', '0.736', '0.7', '0.664', '0.628', '0.591', '0.555', '0.518', '0.481', '0.444', '0.407', '0.37', '0.332', '0.294', '0.256', '0.218', '0.18', '0.142', '0.104', '0.065', '0.026'], 
veloBolaX = [2.8676, 2.857048, 2.846496, 2.835944, 2.825392, 2.81484, 2.804288, 2.793736, 2.783184, 2.7726319999999998, 2.76208, 2.751528, 2.740976, 2.7304239999999997, 2.719872, 2.70932, 2.698768, 2.6882159999999997, 2.677664, 2.667112, 2.65656, 2.646008, 2.635456, 2.624904, 2.614352, 2.6038, 2.593248, 2.582696, 2.5721439999999998, 2.561592, 2.55104, 2.540488, 2.529936, 2.519384, 2.508832, 2.49828, 2.487728, 2.477176, 2.466624, 2.456072, 2.44552, 2.434968, 2.424416, 2.413864, 2.403312, 2.39276, 2.382208, 2.3716559999999998, 2.361104, 2.350552, 2.34, 2.329448, 2.318896, 2.308344, 2.297792, 2.2872399999999997, 2.276688, 2.266136, 2.255584, 2.245032, 2.23448, 2.223928, 2.2133760000000002, 2.202824, 2.192272, 2.18172, 2.1711679999999998, 2.160616, 2.150064, 2.139512, 2.12896, 2.118408, 2.107856, 2.0973040000000003, 2.086752, 2.0762, 2.065648, 2.055096, 2.044544, 2.033992, 2.02344, 2.012888, 2.002336, 1.991784, 1.9812319999999999, 1.97068, 1.960128, 1.949576, 1.9390239999999999, 1.928472, 1.91792, 1.907368, 1.8968159999999998, 1.886264, 1.875712, 1.8651600000000002, 1.854608, 1.8440560000000001, 1.833504, 1.8229520000000001, 1.8124, 1.801848, 1.791296, 1.7807439999999999, 1.770192, 1.7596399999999999, 1.749088, 1.7385359999999999, 1.727984, 1.7174319999999998, 1.70688, 1.6963279999999998, 1.685776, 1.675224, 1.6646720000000002, 1.65412, 1.6435680000000001, 1.633016, 1.6224640000000001, 1.611912, 1.6013600000000001, 1.590808, 1.580256, 1.569704, 1.559152, 1.5486, 1.538048, 1.527496, 1.516944, 1.506392, 1.49584, 1.485288, 1.474736, 1.464184, 1.453632, 1.44308, 1.432528, 1.421976, 1.4114240000000002, 1.4008720000000001, 1.3903200000000002, 1.379768, 1.3692160000000002, 1.358664, 1.3481120000000002, 1.33756, 1.3270080000000002, 1.316456, 1.3059040000000002, 1.295352, 1.2848000000000002, 1.274248, 1.263696, 1.253144, 1.242592, 1.23204, 1.221488, 1.210936, 1.200384, 1.189832, 1.1792799999999999, 1.168728, 1.1581759999999999, 1.1476240000000002, 1.137072, 1.1265200000000002, 1.115968, 1.1054160000000002, 1.094864, 1.0843120000000002, 1.07376, 1.0632080000000002, 1.052656, 1.0421040000000001, 1.031552, 1.0210000000000001, 1.010448, 0.9998960000000001, 0.989344, 0.9787920000000001, 0.96824, 0.9576880000000001, 0.947136, 0.9365840000000001, 0.926032, 0.9154800000000001, 0.904928, 0.8943760000000001, 0.8838240000000002, 0.8732720000000003, 0.8627200000000004, 0.8521680000000003, 0.8416160000000001, 0.831064, 0.8205120000000004, 0.8099600000000002, 0.7994080000000001, 0.788856, 0.7783040000000003, 0.7677520000000002, 0.7572000000000001, 0.7466480000000004, 0.7360959999999999, 0.7255440000000002, 0.7149920000000001, 0.7044400000000004, 0.6938879999999998, 0.6833360000000002, 0.672784, 0.6622320000000004, 0.6516799999999998, 0.6411280000000001, 0.630576, 0.6200240000000004, 0.6094719999999998, 0.5989200000000001, 0.588368, 0.5778160000000003, 0.5672639999999998, 0.5567120000000001, 0.54616, 0.5356080000000003, 0.5250559999999997, 0.5145040000000001, 0.503952, 0.4934000000000003, 0.48284800000000017, 0.47229600000000005, 0.4617440000000004, 0.45119200000000026, 0.44064000000000014, 0.430088, 0.41953600000000035, 0.40898400000000024, 0.3984320000000001, 0.38788, 0.37732800000000033, 0.3667760000000002, 0.3562240000000001, 0.345672, 0.3351200000000003, 0.3245680000000002, 0.3140160000000001, 0.30346399999999996, 0.2929120000000003, 0.28236000000000017, 0.27180800000000005, 0.26125599999999993, 0.25070400000000026, 0.2401519999999997, 0.22960000000000003, 0.21904800000000035, 0.20849600000000024, 0.19794400000000056, 0.187392, 0.17684000000000033, 0.1662880000000002, 0.1557360000000001, 0.14518399999999998, 0.1346320000000003, 0.12408000000000019, 0.11352800000000007, 0.10297599999999996, 0.09242400000000028, 0.08187200000000017, 0.07132000000000005, 0.06076799999999993, 0.05021600000000026, 0.039664000000000144, 0.029112000000000027, 0.01855999999999991, 0.008008000000000237, -0.0025439999999998797, -0.013095999999999997, -0.023648000000000113, -0.034199999999999786, -0.04475199999999946, -0.05530400000000002, -0.06585599999999969, -0.07640799999999981, -0.08695999999999948, -0.09751200000000004, -0.10806399999999972, -0.11861599999999983, -0.1291679999999995, -0.13972000000000007, -0.15027199999999974, -0.16082399999999986, -0.17137599999999953, -0.1819280000000001, -0.19247999999999976, -0.20303199999999988, -0.21358399999999955, -0.2241360000000001, -0.23468799999999979, -0.2452399999999999, -0.2557919999999996, -0.26634400000000014, -0.2768959999999998, -0.2874479999999999, -0.2979999999999996, -0.3085519999999997, -0.31910399999999983, -0.3296559999999995, -0.34020800000000007, -0.35075999999999974, -0.36131199999999986, -0.37186399999999953, -0.3824160000000001, -0.39296799999999976, -0.4035199999999999, -0.41407199999999955, -0.4246240000000001, -0.4351759999999998, -0.4457279999999999, -0.4562799999999996, -0.46683200000000014, -0.4773839999999998, -0.4879359999999999, -0.4984879999999996, -0.5090400000000002, -0.5195919999999998, -0.530144, -0.5406959999999996, -0.5512480000000002, -0.5617999999999999, -0.5723519999999995, -0.5829039999999996, -0.5934559999999998, -0.6040079999999999, -0.6145599999999996, -0.6251119999999997, -0.6356639999999998, -0.6462159999999999, -0.6567679999999996, -0.6673199999999997, -0.6778719999999998, -0.6884239999999999, -0.6989759999999996, -0.7095279999999997, -0.7200799999999998, -0.730632, -0.7411839999999996, -0.7517359999999997, -0.7622879999999999, -0.77284, -0.7833919999999996, -0.7939440000000002, -0.8044959999999999, -0.815048, -0.8255999999999997, -0.8361519999999993, -0.8467039999999999, -0.8572559999999996, -0.8678079999999997, -0.8783599999999998, -0.8889119999999999, -0.8994639999999996, -0.9100159999999997, -0.9205679999999998, -0.93112, -0.9416719999999996, -0.9522239999999997, -0.9627759999999999, -0.973328, -0.9838799999999996, -0.9944319999999998, -1.0049839999999999, -1.015536, -1.0260879999999997, -1.0366399999999998, -1.047192, -1.057744, -1.0682959999999997, -1.0788479999999998, -1.0894, -1.0999519999999996, -1.1105039999999997, -1.1210559999999994, -1.131608, -1.1421599999999992, -1.1527119999999997, -1.1632639999999994, -1.173816, -1.1843679999999996, -1.1949200000000002, -1.2054719999999999, -1.2160239999999995, -1.2265759999999992, -1.2371279999999998, -1.2476799999999995, -1.258232, -1.2687839999999997, -1.2793360000000003, -1.289888, -1.3004399999999996, -1.3109919999999993, -1.3215439999999998, -1.3320959999999995, -1.342648, -1.3531999999999997, -1.3637519999999994, -1.374303999999999, -1.3848559999999996, -1.3954080000000002, -1.4059599999999999, -1.4165119999999995, -1.427064, -1.4376159999999998, -1.4481679999999995, -1.4587199999999991, -1.4692719999999997, -1.4798240000000003, -1.490376, -1.5009279999999996, -1.5114800000000002, -1.5220319999999998, -1.5325839999999995, -1.5431359999999992, -1.5536879999999997, -1.5642400000000003, -1.574792, -1.5853439999999996, -1.5958960000000002, -1.6064479999999999, -1.6169999999999995, -1.6275519999999992, -1.638103999999999, -1.6486560000000003, -1.659208, -1.6697599999999997, -1.6803119999999994, -1.690864, -1.7014159999999996, -1.7119679999999993, -1.722519999999999, -1.7330720000000004, -1.743624, -1.7541759999999997, -1.7647279999999994, -1.77528, -1.7858319999999996, -1.7963839999999993, -1.806935999999999, -1.8174880000000004, -1.82804, -1.8385919999999998, -1.8491439999999995, -1.859696, -1.8702479999999997, -1.8807999999999994, -1.891351999999999, -1.9019039999999996, -1.9124560000000002, -1.9230079999999998, -1.9335599999999995, -1.9441119999999992, -1.9546639999999997, -1.9652159999999994, -1.975768, -1.9863199999999996, -1.9968720000000002, -2.007424, -2.0179759999999995, -2.028527999999999, -2.03908, -2.0496319999999995, -2.060184, -2.0707359999999997],
veloBolaY = [1.8, 1.792, 1.784, 1.776, 1.768, 1.76, 1.752, 1.744, 1.736, 1.728, 1.72, 1.712, 1.704, 1.696, 1.688, 1.6800000000000002, 1.6720000000000002, 1.6640000000000001, 1.6560000000000001, 1.6480000000000001, 1.6400000000000001, 1.6320000000000001, 1.624, 1.616, 1.608, 1.6, 1.592, 1.584, 1.576, 1.568, 1.56, 1.552, 1.544, 1.536, 1.528, 1.52, 1.512, 1.504, 1.496, 1.488, 1.48, 1.472, 1.464, 1.456, 1.448, 1.44, 1.432, 1.424, 1.416, 1.408, 1.4, 1.392, 1.384, 1.376, 1.3679999999999999, 1.3599999999999999, 1.3519999999999999, 1.344, 1.336, 1.328, 1.32, 1.312, 1.304, 1.296, 1.288, 1.28, 1.272, 1.264, 1.256, 1.2480000000000002, 1.2400000000000002, 1.2320000000000002, 1.2240000000000002, 1.2160000000000002, 1.2080000000000002, 1.2, 1.192, 1.184, 1.176, 1.168, 1.16, 1.152, 1.1440000000000001, 1.1360000000000001, 1.1280000000000001, 1.12, 1.112, 1.104, 1.096, 1.088, 1.08, 1.072, 1.064, 1.056, 1.048, 1.04, 1.032, 1.024, 1.016, 1.008, 1.0, 0.992, 0.984, 0.976, 0.968, 0.96, 0.952, 0.944, 0.9359999999999999, 0.9279999999999999, 0.9199999999999999, 0.9119999999999999, 0.9039999999999999, 0.8960000000000001, 0.8880000000000001, 0.8800000000000001, 0.8720000000000001, 0.8640000000000001, 0.8560000000000001, 0.8480000000000001, 0.8400000000000001, 0.8320000000000001, 0.8240000000000001, 0.8160000000000001, 0.808, 0.8, 0.792, 0.784, 0.776, 0.768, 0.76, 0.752, 0.744, 0.736, 0.728, 0.72, 0.712, 0.704, 0.6960000000000002, 0.6880000000000002, 0.6800000000000002, 0.6720000000000002, 0.6640000000000001, 0.6560000000000001, 0.6480000000000001, 0.6400000000000001, 0.6320000000000001, 0.6240000000000001, 0.6160000000000001, 0.6080000000000001, 0.5999999999999999, 0.5919999999999999, 0.5839999999999999, 0.5759999999999998, 0.5679999999999998, 0.5599999999999998, 0.5519999999999998, 0.5439999999999998, 0.5359999999999998, 0.5279999999999998, 0.5199999999999998, 0.5119999999999998, 0.5039999999999998, 0.496, 0.488, 0.48, 0.472, 0.46399999999999997, 0.45599999999999996, 0.44799999999999995, 0.43999999999999995, 0.43199999999999994, 0.42399999999999993, 0.4159999999999999, 0.4079999999999999, 0.3999999999999999, 0.3919999999999999, 0.3839999999999999, 0.3759999999999999, 0.3679999999999999, 0.3599999999999999, 0.35199999999999987, 0.34399999999999986, 0.33599999999999985, 0.32799999999999985, 0.31999999999999984, 0.31199999999999983, 0.3039999999999998, 0.29600000000000004, 0.28800000000000003, 0.28, 0.272, 0.264, 0.256, 0.248, 0.24, 0.23199999999999998, 0.22399999999999998, 0.21599999999999997, 0.20799999999999996, 0.19999999999999996, 0.19200000000000017, 0.18399999999999994, 0.17600000000000016, 0.16799999999999993, 0.16000000000000014, 0.1519999999999999, 0.14400000000000013, 0.1359999999999999, 0.1280000000000001, 0.11999999999999988, 0.1120000000000001, 0.10399999999999987, 0.09600000000000009, 0.08799999999999986, 0.08000000000000007, 0.07199999999999984, 0.06400000000000006, 0.05599999999999983, 0.04800000000000004, 0.039999999999999813, 0.03200000000000003, 0.0239999999999998, 0.016000000000000014, 0.007999999999999785, 0.0, -0.007999999999999785, -0.016000000000000014, -0.0239999999999998, -0.03200000000000003, -0.039999999999999813, -0.04800000000000004, -0.05599999999999983, -0.06400000000000006, -0.07199999999999984, -0.08000000000000007, -0.08799999999999986, -0.09600000000000009, -0.10399999999999987, -0.1120000000000001, -0.11999999999999988, -0.1280000000000001, -0.1359999999999999, -0.14400000000000013, -0.1519999999999999, -0.16000000000000014, -0.16799999999999993, -0.17600000000000016, -0.18399999999999994, -0.19200000000000017, -0.19999999999999996, -0.20799999999999996, -0.21599999999999997, -0.22399999999999998, -0.23199999999999998, -0.24, -0.248, -0.256, -0.264, -0.272, -0.28, -0.28800000000000003, -0.29600000000000004, -0.30400000000000005, -0.31200000000000006, -0.32000000000000006, -0.32800000000000007, -0.3360000000000001, -0.3440000000000001, -0.3520000000000001, -0.3600000000000001, -0.3680000000000001, -0.3760000000000001, -0.3840000000000001, -0.3920000000000001, -0.40000000000000013, -0.4079999999999997, -0.41600000000000015, -0.4239999999999997, -0.43200000000000016, -0.4399999999999997, -0.4480000000000002, -0.45599999999999974, -0.4640000000000002, -0.47199999999999975, -0.4800000000000002, -0.48799999999999977, -0.4960000000000002, -0.5039999999999998, -0.5120000000000002, -0.5199999999999998, -0.5280000000000002, -0.5359999999999998, -0.5440000000000003, -0.5519999999999998, -0.5600000000000003, -0.5679999999999998, -0.5760000000000003, -0.5839999999999999, -0.5920000000000003, -0.6000000000000003, -0.6079999999999999, -0.6160000000000003, -0.6239999999999999, -0.6320000000000003, -0.6399999999999999, -0.6480000000000004, -0.6559999999999999, -0.6640000000000004, -0.6719999999999999, -0.6800000000000004, -0.688, -0.6960000000000004, -0.704, -0.7120000000000004, -0.72, -0.7280000000000004, -0.736, -0.7440000000000004, -0.752, -0.7600000000000005, -0.768, -0.7760000000000005, -0.784, -0.7920000000000005, -0.8, -0.808, -0.8160000000000001, -0.8240000000000001, -0.8320000000000001, -0.8400000000000001, -0.8480000000000001, -0.8560000000000001, -0.8640000000000001, -0.8720000000000001, -0.8800000000000001, -0.8880000000000001, -0.8960000000000001, -0.9040000000000001, -0.9120000000000001, -0.9200000000000002, -0.9280000000000002, -0.9360000000000002, -0.9440000000000002, -0.9520000000000002, -0.9600000000000002, -0.9680000000000002, -0.9760000000000002, -0.9840000000000002, -0.9920000000000002, -1.0000000000000002, -1.0079999999999998, -1.0160000000000002, -1.0239999999999998, -1.0320000000000003, -1.0399999999999998, -1.0480000000000003, -1.0559999999999998, -1.0640000000000003, -1.0719999999999998, -1.0800000000000003, -1.0879999999999999, -1.0960000000000003, -1.1039999999999999, -1.1120000000000003, -1.1199999999999999, -1.1280000000000003, -1.136, -1.1440000000000003, -1.152, -1.1600000000000004, -1.168, -1.1760000000000004, -1.184, -1.1920000000000004, -1.2, -1.208, -1.216, -1.224, -1.232, -1.24, -1.248, -1.256, -1.264, -1.272, -1.28, -1.288, -1.296, -1.304, -1.312, -1.32, -1.328, -1.336, -1.344, -1.352, -1.36, -1.368, -1.3760000000000001, -1.3840000000000001, -1.3920000000000001, -1.4000000000000001, -1.4080000000000001, -1.4159999999999997, -1.4240000000000002, -1.4320000000000002, -1.4400000000000002, -1.4479999999999997, -1.4560000000000002, -1.4640000000000002, -1.4720000000000002, -1.4799999999999998, -1.4880000000000002, -1.4960000000000002, -1.5040000000000002, -1.5119999999999998, -1.5200000000000002, -1.5280000000000002, -1.5360000000000003, -1.5439999999999998, -1.5520000000000003, -1.5600000000000003, -1.5680000000000003, -1.5759999999999998, -1.5840000000000003, -1.5920000000000003, -1.6000000000000003, -1.6079999999999999, -1.6159999999999999, -1.6240000000000003, -1.6320000000000003, -1.64, -1.648, -1.6560000000000004, -1.6640000000000004, -1.672, -1.68, -1.6880000000000004, -1.6960000000000004, -1.704, -1.712, -1.7200000000000004, -1.7280000000000004, -1.736, -1.744, -1.7520000000000004, -1.7600000000000005, -1.768, -1.776, -1.7840000000000005, -1.7920000000000005, -1.8, -1.808, -1.8159999999999996, -1.8240000000000005, -1.832, -1.84, -1.8479999999999996, -1.8560000000000005, -1.864, -1.872, -1.8799999999999997, -1.8880000000000006, -1.8960000000000001, -1.9040000000000001, -1.9119999999999997, -1.9200000000000006, -1.9280000000000002, -1.9360000000000002, -1.9439999999999997],
aceleracaoBolaX = -0.5276,
aceleracaoBolaY = -0.4,
distancia = [],
roboX = [], 
roboY = [],
robo = [],
bola = [],
cos = [], 
sin = [],
vetorAngulo = [],
veloRobo = [],
veloRoboX = [],
veloRoboY = [],
aceleracaoRobo = [],
vetorTempoInterceptacao = [],
vetorBolainterceptacaoY=[],
vetorBolainterceptacaoX=[],
tempoInterceptacao = 0,
posicaoInterBolaX=0,
posicaoInterBolaY=0;
var j = 0;

// x inicial e y inicial do robo
function iniciarPrograma(){
    let x = parseFloat(document.getElementById("XInicialRobo").value);
    let y = parseFloat(document.getElementById("YInicialRobo").value);
    // adicionando o x e o y nos vetores posições:
    roboX.push(x);
    roboY.push(y);
    // calculando a distancia inicial do robo
    distancia.push(
        parseFloat(Math.sqrt(
            Math.pow(
                (roboX[0] - parseFloat(vetorBolaX[0])), 2) + 
            Math.pow(
                (roboY[0] - parseFloat(vetorBolaY[0])), 2)))
    );
    
    // acelercao do robo durante o movimento e velocidade da bola durante o movimento
    for(let i = 0; i < 468; i++){
        // aceleracao do robo e da bola estao sendo consideradas constantes e nao variam de acordo com o movimento
        aceleracaoRobo[i] = (aceleracao);
    }
    // calculando a aceleracao do robo durante o movimento
    for(let i = 0; i < 468; i++){
        veloRobo[i] = (parseFloat(aceleracaoRobo[i]*vetorTempo[i])); // v = v0 + at com v = 0
        if(veloRobo[i] >= veloMaxima){
            veloRobo[i] = parseFloat(veloMaxima);
            aceleracaoRobo[i] = 0; // quando algo chega em sua velocidade máxima, a aceleracao é = 0
        }
    }
    // calculando a posicao do robo durante o movimento até a interceptacao
    for(let i = 0; i < 468; i++){
        // calcula a componente principal do vetor distancia a cada instante do movimento
        distancia[i] = (
            parseFloat(
                Math.sqrt(
                    Math.pow(
                        (roboX[i] - parseFloat(vetorBolaX[i])),2)
                        ) + 
                Math.sqrt(
                    Math.pow(
                        (roboY[i] - parseFloat(vetorBolaY[i])),2)
                        )
            ));
        
        // calcula o cosseno e o seno de cada posicao para posteriormente calcular a velocidade em cada parte
        cos.push(
            parseFloat(
                (parseFloat(vetorBolaX[i]) - roboX[i]) / (distancia[i])
            )
        );
        sin.push(
            parseFloat(
                (parseFloat(vetorBolaY[i]) - roboY[i]) / (distancia[i])
            )
        );
        // calcula a posicao futura do robo em cada componente 
        roboX[i + 1] = parseFloat(
            roboX[i] + (veloRobo[i]*(cos[i]*0.05))
        );
        roboY[i + 1] = parseFloat(
            roboY[i] + (veloRobo[i]*(sin[i]*0.05))
        );

        if(roboX[i] >= parseFloat(vetorBolaX[i]) - 0.2 && roboX[i] <= parseFloat(vetorBolaX[i]) + 0.2 && roboY[i] >= parseFloat(vetorBolaY[i]) - 0.2 && roboY[i] <= parseFloat(vetorBolaY[i]) + 0.2){
            tempoInterceptacao = vetorTempo[i];
            posicaoInterBolaY=vetorBolaY[i];
            posicaoInterBolaX=vetorBolaX[i];
            j = i
            for (let n = 0; n < 468; n++){
                vetorTempoInterceptacao.push(vetorTempo[n]);
                vetorBolainterceptacaoY.push(vetorBolaY[n]);
                vetorBolainterceptacaoX.push(vetorBolaX[n]);
                if (vetorTempoInterceptacao[n] == tempoInterceptacao){
                    break;
                }
            }
            console.log("Interceptou");
            /* alert("A bola foi encontrada em " + tempoInterceptacao + " segundos") */;
            break;
        }
    }  
    //coeficiente angular da reta traçada entre a bola e o centro do gol
    var m=((centroGolY-posicaoInterBolaY)/(centroGolX-posicaoInterBolaX));
    //função da equação da reta y=m(x-x0)+y0 que quando derivada restará somente m
    var posicaoIdealXdoRobo=((posicaoInterBolaX*Math.sqrt((1+(m**2)))-0.00224)/Math.sqrt((1+(m**2))));
    var posicaoIdealYdoRobo= (parseFloat(m*(posicaoIdealXdoRobo-posicaoInterBolaX))+parseFloat(posicaoInterBolaY));

    // calcula o angulo em cada componente para posteriormente calcular a velocidade em cada componente
    for(let i = 0; i < 468; i++){
        vetorAngulo.push(parseFloat(Math.atan(sin[i]/cos[i])));
        veloRoboX[i] = (parseFloat(veloRobo[i]*(Math.cos(vetorAngulo[i]))));
        veloRoboY[i] = (parseFloat(veloRobo[i]*(Math.sin(vetorAngulo[i]))));
        // caso a velocidade do componente principal seja maior que a velocidade máxima, a velocidade é igual a velocidade máxima
        if(veloRoboX[i] >= veloMaxima){
            veloRoboX[i] = parseFloat(veloMaxima);
            veloRoboY[i] = parseFloat(veloMaxima);
        }
    }
    console.log(aceleracaoBolaX);
    console.log(posicaoIdealYdoRobo);

    /* console.log(robo);
    console.log(bola);
    console.log(distancia);
    console.log(roboX);
    console.log(vetorBolaX);
    console.log(roboY);
    console.log(vetorBolaY);
    console.log(veloRobo);
    console.log(veloBolaX);
    console.log(veloBolaY);
    console.log(aceleracaoRobo);
    console.log(aceleracaoBolaX);
    console.log(aceleracaoBolaY);
    console.log(vetorTempoInterceptacao); */
/*  */
    // chama a funcao do gráfico
    grafico();
    // chama a funcao das informacoes cinematicas
    informacoesCinematicas();
    // manipula o DOM
    dom();
}

function limpa(){
    // limpa todos os arrays e campos para que o programa possa ser executado novamente
    document.getElementById("XInicialRobo").value = "";
    document.getElementById("YInicialRobo").value = "";
    distancia = [];
    roboX = [];
    roboY = [];
    veloRobo = [];
    veloBolaX = [];
    veloBolaY = [];
    aceleracaoRobo = [];
    aceleracaoBolaX = [];
    aceleracaoBolaY = [];
    vetorTempoInterceptacao = [];
    tempoInterceptacao = 0;
}
// cria os gráficos de acordo com o movimento do robo e da bola com os seus arrays 
function grafico(){
    // cria o gráfico de posicao do robo
    var trace1 = {
        x: roboX,
        y: roboY,
        mode: 'lines+markers',
        name: 'Trajetoria Robo',
        line: {
            color: 'rgb(0, 0, 0)',
            width: 1
        }
    };

    var trace2 = {
        x: vetorBolainterceptacaoX,
        y: vetorBolainterceptacaoY,
        mode: 'lines+markers',
        name: 'Trajetoria Bola',
        line: {
            color: '#e6961e',
            width: 1
        }
    };

    var data = [ trace1, trace2];

    var layout = {
        title:'Trajetoria da bola e robo X/Y'
    };

    Plotly.newPlot('trajetoria', data, layout);
    // componente x da posicao do robo pelo tempo
    var xtRobo = {
        x: vetorTempo,
        y: roboX,
        mode: 'lines+markers',
        name: 'X/T do Robo',
        line: {
            color: 'rgb(0, 0, 0)',
            width: 1
        }
    };
    var xtBola = {
        x: vetorTempo,
        y: vetorBolainterceptacaoX,
        mode: 'lines+markers',
        name: 'X/T da Bola',
        line: {
            color: '#e6961e',
            width: 1
        }
    };

    var data = [xtRobo, xtBola];
    var layout = {
        title: 'X do Robo e da Bola pelo Tempo'
    };
    Plotly.newPlot('xRoboBola', data, layout);

    // componente y da posicao do robo pelo tempo
    var ytRobo = {
        x: vetorTempo,
        y: roboY,
        mode: 'lines+markers',
        name: 'Y/T do Robo',
        line: {
            color: 'rgb(0, 0, 0)',
            width: 1
        }
    };
    var ytBola = {
        x: vetorTempo,
        y: vetorBolainterceptacaoY,
        mode: 'lines+markers',
        name: 'Y/T da Bola',
        line: {
            color: '#e6961e',
            width: 1
        }
    };

    var data = [ytRobo, ytBola];
    var layout = {
        title: 'Y do Robo e Bola pelo Tempo'
    };
    Plotly.newPlot('yRoboBola', data, layout);

    // componente x da velocidade do robo pelo tempo
    var vxRobo = {
        x: vetorTempo,
        y: veloRobo,
        mode: 'lines+markers',
        name: 'Vx/T do Robo',
        line: {
            color: 'rgb(0, 0, 0)',
            width: 1
        }
    }
    var vxBola = {
        x: vetorTempo,
        y: veloBolaX,
        mode: 'lines+markers',
        name: 'Vx/T da Bola',
        line: {
            color: '#e6961e',
            width: 1
        }
    }
    var data = [vxRobo, vxBola];
    var layout = {
        title: 'Vx do Robo e da Bola pelo Tempo'
    };
    Plotly.newPlot('vxRoboBola', data, layout);

    // componente y da velocidade do robo pelo tempo
    var vyRobo = {
        x: vetorTempo,
        y: veloRobo,
        mode: 'lines+markers',
        name: 'Vy/T do Robo',
        line: {
            color: 'rgb(0, 0, 0)',
            width: 1
        }
    }
    var vyBola = {
        x: vetorTempo,
        y: veloBolaY,
        mode: 'lines+markers',
        name: 'Vy/T da Bola',
        line: {
            color: '#e6961e',
            width: 1
        }
    }
    var data = [vyRobo, vyBola];
    var layout = {
        title: 'Vy do Robo e da Bola pelo Tempo'
    };
    Plotly.newPlot('vyRoboBola', data, layout);

    // graficos da aceleracao pelo tempo:
    var axRobo = {
        x: vetorTempo,
        y: aceleracaoRobo,
        mode: 'lines+markers',
        name: 'Ax/T do Robo',
        line: {
            color: 'rgb(0, 0, 0)',
            width: 1
        }
    }
    var axBola = {
        x: vetorTempo,
        y: -0.5276,
        mode: 'lines+markers',
        name: 'Ax/T da Bola',
        line: {
            color: '#e6961e',
            width: 1
        }
    }
    var data = [axRobo, axBola];
    var layout = {
        title: 'Ax do Robo e da Bola pelo Tempo'
    };
    Plotly.newPlot('axRoboBola', data, layout);

    var ayRobo = {
        x: vetorTempo,
        y: aceleracaoRobo,
        mode: 'lines+markers',
        name: 'Ay/T do Robo',
        line: {
            color: 'rgb(0, 0, 0)',
            width: 1
        }
    }
    var ayBola = {
        x: vetorTempo,
        y: aceleracaoBolaY,
        mode: 'lines+markers',
        name: 'Ay/T da Bola',
        line: {
            color: '#e6961e',
            width: 1
        }
    }
    var data = [ayRobo, ayBola];
    var layout = {
        title: 'Ay do Robo e da Bola pelo Tempo'
    };
    Plotly.newPlot('ayRoboBola', data, layout);

    // grafico da distancia relativa:
    var distRobo = {
        x: vetorTempo,
        y: distancia,
        mode: 'lines+markers',
        name: 'Distancia relativa',
        line: {
            color: 'rgb(0, 0, 0)',
            width: 1
        }
    };


    var data = [distRobo];
    var layout = {
        title: 'Distancia relativa entre robo e a bola'
    };
    Plotly.newPlot('distanciaRelativa', data, layout);
}
function informacoesCinematicas(){
    // responsavel por mostrar as informacoes cinematicas nos inputs da ultima seccao
    document.getElementById("aceleracaoRobo").innerHTML ="Aceleração = "+ aceleracao + " m/s²";
    document.getElementById("velocidadeMax").innerHTML ="Velocidade máxima = "+ veloMaxima + " m/s";
    document.getElementById("massaRobo").innerHTML ="Massa = " +2.8 + " kg";

    document.getElementById("vetorBolaXIntercept").innerHTML ="x = "+ vetorBolaX[j] + " m";
    document.getElementById("vetorBolaYIntercept").innerHTML ="y = "+ vetorBolaY[j] + " m";
    document.getElementById("roboXIntercept").innerHTML ="x = "+ roboX[j] + " m";
    document.getElementById("roboYIntercept").innerHTML ="y = "+ roboY[j] + " m";

    document.getElementById("velocidadeXBolaIntercept").innerHTML ="vx = " +veloBolaX[j] + " m/s";
    document.getElementById("velocidadeYBolaIntercept").innerHTML ="vy = " +veloBolaY[j] + " m/s";
    document.getElementById("velocidadeRoboXIntercept").innerHTML ="vx = "+ 0 + " m/s";
    document.getElementById("velocidadeRoboYIntercept").innerHTML ="vy = "+ 0 + " m/s";

    document.getElementById("aceleracaoXBola").innerHTML ="ax = "+ aceleracaoXBola + " m/s²";
    document.getElementById("aceleracaoYBola").innerHTML ="ay = "+ aceleracaoYBola + " m/s²";
    
    let RX = Math.abs(roboX[j] - roboX[0]);
    let RY = Math.abs(roboY[j] - roboY[0]);
    document.getElementById("distanciaRoboX").innerHTML ="dx = "+ RX + " m";
    document.getElementById("distanciaRoboY").innerHTML ="dy = "+ RY + " m";

    document.getElementById("distanciaBolaX").innerHTML ="dx = "+ Math.abs(vetorBolaX[j] - vetorBolaX[0]) + " m";
    document.getElementById("distanciaBolaY").innerHTML ="dy = "+ Math.abs(vetorBolaY[j] - vetorBolaY[0]) + " m";

    document.getElementById("intercept").innerHTML ="O tempo de interceptação foi de "+"<b class = 'orange'>"+ tempoInterceptacao +"<b/>"+" segundos!";
}

const selec = (el) => document.querySelector(el);

function dom (){
    selec("#TempoInter").style.display = "block";
    selec("#graphs").style.display = "block";
    selec("#info").style.display = "flex";
}